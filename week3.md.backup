# Web

## Local Authority
### Solution
I looked up the page source to reveal the login.php POST request on form submission, and on reading through its code, I discovered references to `secure.js`, `styles.css` and `admin.php`.
Finally, after reading through the contents of all three, I found the correct pair of credentials, which I submitted to obtain the flag.

### Flag
`picoCTF{j5_15_7r4n5p4r3n7_b0c2c9cb}`


## Forbidden Paths
### Solution
I successively kept appending `../` to the relative path in the form, and eventually, the `file not found` error changed into the flag.

### Flag
`picoCTF{7h3_p47h_70_5ucc355_e5fe3d4d}`


## Caas
### Solution
I looked up the index.js file to realise that the `{message}` is not validated before being passed to exec and, thus, piped an `ls` after passing a random message as instructed in the front end. This revealed the existence of `falg.txt`, which I `cat`ed to obtain the flag.

### Flag
`picoCTF{moooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0o}`



# Reverse Engineering

## Keygenme-py
### Solution
I read through the code and came across this:
```
key_part_static1_trial = "picoCTF{1n_7h3_|<3y_of_"
key_part_dynamic1_trial = "xxxxxxxx"
key_part_static2_trial = "}"
key_full_template_trial = key_part_static1_trial + key_part_dynamic1_trial + key_part_static2_trial
```
After a quick `Ctrl+F` for `key`, I found the function definition for `enter_license()` which revealed that `decrypt_full_version()` is only invoked when `check_key()` returns `true`.  With some digging, I realised that the first part of the flag is supposed to be `picoCTF{1n_7h3_|<3y_of_` and all we had to do was figure out the `xxxxxxxx`. To do this, I reverse engineered `check_key()` and printed the hexdigests of `username_trial` using the `sha256` algorithm and the `hashlib` library in the same order of indices `4,5,3,6,2,7,1,8` as in the `check_key()` definition. This resulted in the program printing the requried flag.

### Flag
`picoCTF{1n_7h3_|<3y_of_e584b363}`


## ARMssembly 0
### Solution
I compiled the program using the ARMv8 cross compiler suite provided by GNU through `binutils-aarch64-linux-gnu` & `gcc-aarch64-linux-gnu` and an ARMx64 static emulator `qemu-user-static`.  Finally, I ran the program with the given inputs using `./chall 3854998744 915131509` and converted the decimal result into the required hexadecimal flag.

### Flag
`picoCTF{E5C69CD8}`


## GDB Baby Step 1
### Solution
I loaded the given file in the `gdb	` debugger and disassembled `main`, which revealed

### Flag
`picoCTF{549698}`



# Forensics